version: "3.8"

services:

  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    ports:
      - "9042:9042"
    networks:
      - backend

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend

  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: app_db
    ports:
      - "5432:5432"
    networks:
      - backend

  mongo:
    image: mongo
    container_name: mongo
    ports:
      - "27017:27017"
    networks:
      - backend

  # EXPORTERS

  redis-exporter:
    image: oliver006/redis_exporter
    container_name: redis_exporter
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "redis:6379"
    networks:
      - backend

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://user:password@postgres:5432/app_db?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    networks:
      - backend

  mongodb-exporter:
    image: percona/mongodb_exporter:0.40
    container_name: mongodb_exporter
    environment:
      MONGODB_URI: "mongodb://mongo:27017"
    ports:
      - "9216:9216"
    depends_on:
      - mongo
    networks:
      - backend

  cassandra-exporter:
    image: bitnami/cassandra-exporter
    container_name: cassandra_exporter
    ports:
      - "8080:8080"
    environment:
      - CASSANDRA_HOST=cassandra
      - CASSANDRA_PORT=9042
    depends_on:
      - cassandra
    networks:
      - backend

  # MONITORING

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - backend

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - backend

  nosqlbench:
    image: nosqlbench/nosqlbench:latest
    container_name: nosqlbench
    environment:
      - PATH=/opt/nb5:$PATH
    volumes:
      - ./test-plans:/test-plans
    entrypoint: [ "tail", "-f", "/dev/null" ] # Keep container running so you can exec into it
    depends_on:
      - cassandra
    networks:
      - backend

  jmeter-postgres:
    image: postgres-jmeter:postgres
    container_name: postgres-jmeter
    volumes:
      - ./jmeter-benchmark/test-plans:/test-plans
    # entrypoint: ["/bin/bash"]
    entrypoint: [ "jmeter", "-n", "-t", "/test-plans/postgres_test.jmx", "-l", "/test-plans/postgres_results.jtl" ]
    networks:
      - backend
    depends_on:
      - postgres

  jmeter-mongo:
    image: mongo-jmeter:mongo
    container_name: mongo-jmeter
    stdin_open: true
    tty: true
    volumes:
      - ./jmeter-benchmark/test-plans:/test-plans
    # entrypoint: ["/bin/bash", "-c", "jmeter -n -t /test-plans/test.jmx && tail -f /dev/null"]
    # entrypoint: ["/bin/bash"]
    entrypoint: [ "jmeter", "-n", "-t", "/test-plans/mongo_test.jmx", "-l", "/test-plans/mongo_results.jtl" ]
    networks:
      - backend
    depends_on:
      - mongo

  # ycsb:
  #   image: nuodb/ycsb
  #   container_name: ycsb
  #   depends_on:
  #     - cassandra
  #     - mongo
  #     - postgres
  #   networks:
  #     - backend
  #   stdin_open: true
  #   tty: true


networks:
  backend:
