version: "3.8"

services:

  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    ports:
      - "9042:9042"
    networks:
      - backend

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend

  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: warehouses
    # volumes:
    #   - pg_data:/var/lib/postgresql/data
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./postgres/pgbackrest_conf/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    networks:
      - backend

  # mongodb:
  #   image: percona/percona-server-mongodb:6.0
  #   container_name: mongodb
  #   ports:
  #     - "27017:27017"
  #   command: mongod --replSet rs0 --auth --keyFile /etc/mongo-keyfile
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: admin
  #   volumes:
  #     - mongodb_data:/data/db
  #     - ./mongo/secrets/mongodb-keyfile:/etc/mongo-keyfile:ro
  #   networks:
  #     - backend

  # pbm-agent:
  #   image: percona/percona-backup-mongodb:2.3.0
  #   container_name: pbm-agent
  #   depends_on:
  #     - mongodb
  #   environment:
  #     PBM_MONGODB_URI: "mongodb://root:admin@mongodb:27017/?authSource=admin"
  #   volumes:
  #     - ./mongo/pbm.yaml:/etc/pbm-config.yaml
  #     - pbm_backup:/backup
  #   networks:
  #     - backend

  # EXPORTERS

  redis-exporter:
    image: oliver006/redis_exporter
    container_name: redis_exporter
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "redis:6379"
    networks:
      - backend

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://user:password@postgres:5432/app_db?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    networks:
      - backend

  mongodb-exporter:
    image: percona/mongodb_exporter:0.40
    container_name: mongodb_exporter
    environment:
      MONGODB_URI: "mongodb://mongo:27017"
    ports:
      - "9216:9216"
    depends_on:
      - mongodb
    networks:
      - backend

  cassandra-exporter:
    image: bitnami/cassandra-exporter
    container_name: cassandra_exporter
    ports:
      - "8080:8080"
    environment:
      - CASSANDRA_HOST=cassandra
      - CASSANDRA_PORT=9042
    depends_on:
      - cassandra
    networks:
      - backend

  # MONITORING

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - backend

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - backend

  nosqlbench:
    image: nosqlbench/nosqlbench:latest
    container_name: nosqlbench
    environment:
      - PATH=/opt/nb5:$PATH
    volumes:
      - ./cassandra/test-plans:/test-plans
    entrypoint: [ "tail", "-f", "/dev/null" ] # Keep container running so you can exec into it
    depends_on:
      - cassandra
    networks:
      - backend

  jmeter-postgres:
    image: postgres-jmeter:postgres
    container_name: postgres-jmeter
    volumes:
      - ./jmeter-benchmark/test-plans:/test-plans
    # entrypoint: ["/bin/bash"]
    entrypoint: [ "jmeter", "-n", "-t", "/test-plans/postgres_test.jmx", "-l", "/test-plans/postgres_results.jtl" ]
    networks:
      - backend
    depends_on:
      - postgres

  jmeter-mongo:
    image: mongo-jmeter:mongo
    container_name: mongo-jmeter
    stdin_open: true
    tty: true
    volumes:
      - ./jmeter-benchmark/test-plans:/test-plans
    working_dir: /jmeter
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "/opt/apache-jmeter-5.6.3/bin/jmeter -n -t /test-plans/mongo_test.jmx -l /test-plans/mongo_results.jtl"
    # entrypoint: ["/bin/bash", "-c", "jmeter -n -t /test-plans/test.jmx && tail -f /dev/null"]
    # entrypoint: ["/bin/bash"]
    # entrypoint: [ "jmeter", "-n", "-t", "/test-plans/mongo_test.jmx", "-l", "/test-plans/mongo_results.jtl" ]
    networks:
      - backend
    depends_on:
      - mongodb

  pgbackrest:
    image: woblerr/pgbackrest # Use the same base image for pgBackRest to ensure binary compatibility
    container_name: pg_backrest
    command: tail -f /dev/null # <--- THIS IS THE KEY CHANGE!
    volumes:
      - pg_data:/var/lib/postgresql/data:ro
      - pg_backrest_repo:/var/lib/pgbackrest # pgBackRest repository
      - ./postgres/pgbackrest_conf:/etc/pgbackrest  # pgBackRest configuration files
    environment:
      PGBACKREST_STANZA: main
      PGBACKREST_DB_PATH: /var/lib/postgresql/data
      PGBACKREST_CONFIG: /etc/pgbackrest/pgbackrest.conf
      PGHOST: postgres
      PGPORT: 5432
      PGUSER: user              # Optional but good to include
      PGPASSWORD: password
      # If your pgBackRest repository is on a network share, you might need to add PGBACKREST_REPO_PATH
    networks:
      - backend
    depends_on:
      - postgres

  # pbm-agent:
  #   image: perconalab/percona-backup-mongodb:2
  #   container_name: pbm-agent
  #   depends_on:
  #     - mongo
  #     - minio
  #   environment:
  #     PBM_MONGODB_URI: mongodb://mongo:27017/?replicaSet=rs0
  #     AWS_ACCESS_KEY_ID: minioadmin
  #     AWS_SECRET_ACCESS_KEY: minioadmin
  #   volumes:
  #     - ./mongo/pbm.yaml:/etc/pbm/pbm.yaml
  #   networks:
  #     - backend

  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    ports:
      - "9002:9000"  # API
      - "9001:9001"  # Web UI
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    networks:
      - backend


  # pgbackrest:
  #   image: woblerr/pgbackrest
  #   container_name: pgbackrest
  #   environment:
  #     - PGBACKREST_REPO1_PATH=/pgbackrest
  #     - PGBACKREST_STANZA=main
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data:ro
  #     - pgbackrest:/pgbackrest
  #   entrypoint: ["sleep", "infinity"]
  #   networks:
  #     - backend
  #   depends_on:
  #     - postgres

    # This container runs idle; use `docker exec` to trigger backup commands

  # ycsb:
  #   image: nuodb/ycsb
  #   container_name: ycsb
  #   depends_on:
  #     - cassandra
  #     - mongo
  #     - postgres
  #   networks:
  #     - backend
  #   stdin_open: true
  #   tty: true

# volumes:
#   pgdata:
#   pgbackrest:

  # mongodb:
  #   image: percona/percona-server-mongodb:latest # You can choose your desired MongoDB version
  #   container_name: mongodb
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - mongodb_data:/data/db
  #     - ./mongo/mongod.conf:/etc/mongo/mongod.conf # Optional: Custom mongod.conf
  #     - ./mongo/mongodb.key:/etc/mongo/mongodb.key # <--- Add this line
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: user
  #     MONGO_INITDB_ROOT_PASSWORD: password # CHANGE THIS TO A STRONG PASSWORD
  #   command: mongod --config /etc/mongo/mongod.conf --replSet rs0 --bind_ip_all # Enable replication for PBM
  #   restart: always
  #   networks:
  #     - backend

  # pbm-agent:
  #   image: percona/percona-backup-mongodb:latest # Use the latest stable PBM Agent version
  #   container_name: pbm-agent
  #   volumes:
  #     - pbm_data:/etc/pbm # Persistent storage for PBM config and logs
  #     - ./mongo:/data/db # Mount MongoDB data directory for snapshot backups
  #     - ./mongo/pbm.yaml:/etc/pbm/pbm.yaml # PBM configuration file
  #   environment:
  #     PBM_AGENT_MONGODB_URI: "mongodb://admin:password@mongodb:27017/?authSource=admin&replicaSet=rs0" # Connect to MongoDB
  #     PBM_AGENT_S3_REGION: "us-east-1" # Your S3 region
  #     PBM_AGENT_S3_ENDPOINT_URL: "https://s3.amazonaws.com" # Your S3 endpoint (e.g., for MinIO, change this)
  #     PBM_AGENT_S3_ACCESS_KEY_ID: "YOUR_S3_ACCESS_KEY_ID" # CHANGE THIS
  #     PBM_AGENT_S3_SECRET_ACCESS_KEY: "YOUR_S3_SECRET_ACCESS_KEY" # CHANGE THIS
  #     PBM_AGENT_S3_BUCKET: "your-pbm-backup-bucket" # CHANGE THIS
  #   depends_on:
  #     - mongodb
  #   command: pbm-agent # Start the PBM agent
  #   restart: always
  #   networks:
  #     - backend

  # pbm-cli:
  #   image: percona/percona-backup-mongodb:latest # Use the same PBM Agent version
  #   container_name: pbm-cli
  #   command: "tail -f /dev/null" # Keep the container running for manual CLI commands
  #   environment:
  #     PBM_AGENT_MONGODB_URI: "mongodb://admin:password@mongodb:27017/?authSource=admin&replicaSet=rs0"
  #     PBM_AGENT_S3_REGION: "us-east-1"
  #     PBM_AGENT_S3_ENDPOINT_URL: "https://s3.amazonaws.com"
  #     PBM_AGENT_S3_ACCESS_KEY_ID: "YOUR_S3_ACCESS_KEY_ID"
  #     PBM_AGENT_S3_SECRET_ACCESS_KEY: "YOUR_S3_SECRET_ACCESS_KEY"
  #     PBM_AGENT_S3_BUCKET: "your-pbm-backup-bucket"
  #   depends_on:
  #     - mongodb
  #     - pbm-agent
  #   networks:
  #     - backend

  mongodb:
    image: percona/percona-server-mongodb:6.0
    container_name: percona-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    command: 
      - mongod
      - --replSet=rs0
      - --auth
      - --keyFile=/data/secrets/mongodb-keyfile
    volumes:
      - percona-mongo-data:/data/db
      # - ./mongo/pbm-config:/pbm  # mounting pbm config and credentials
      - ./mongo/secrets:/data/secrets:ro
    networks:
      - backend

  pbm-agent:
    image: percona/percona-backup-mongodb:latest
    container_name: pbm-agent
    depends_on:
      - mongodb
    environment:
      PBM_MONGODB_URI: mongodb://root:password@percona-mongodb:27017/admin
    volumes:
      - ./mongo/backups:/pbm/backups
      - ./mongo/pbm.yaml:/pbm/pbm.yaml
    restart: unless-stopped
    networks:
      - backend

  pbm-cli:
    image: percona/percona-backup-mongodb:latest
    container_name: pbm-cli
    depends_on:
      - mongodb
    entrypoint: tail -f /dev/null  # keep it alive for exec into it
    volumes:
      - ./mongo/backups:/pbm/backups
      # - ./mongo/pbm.yaml:/pbm/pbm.yaml
    networks:
      - backend

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
      - http.cors.allow-headers=X-Requested-With,Content-Type,Content-Length,Authorization
      - http.cors.allow-credentials=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - backend

volumes:
  pg_data:
  pg_backrest_repo:
  minio_data:
  # mongodb_data:
  # pbm_backup:
  mongodb_data:
  pbm_data:
  percona-mongo-data:
  esdata:

networks:
  backend:
